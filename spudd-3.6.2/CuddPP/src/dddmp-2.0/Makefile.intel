#----------------------------------------------------------------------------#
# Makefile for the dddmp distribution kit                                    #
# dddmp: Decision Diagram storage and retrieval                              #
#        (with support for ADD and CNF formulas)                             #
# Version 2.0                                                                #
#----------------------------------------------------------------------------#

# Commands Available:
# make
#    it makes the library libdddmp.a
# make testdddmp
#    it makes the testdddmp program, which allows to test the dddmp
#    package
# make clean
#    it cleans dddmp
# make distclean
#    it cleans dddmp (as clean) with libraries and executable
#    files

#----------------------------------------------------------------------------#
# Configuration Section                                                      #
# uncomment the desired options/sections                                     #
#----------------------------------------------------------------------------#

#-------------#
# Directories #
#-------------#

# Cudd directory
#WHERE	= ../cudd-2.3.1
WHERE	= ..

INCLUDE = $(WHERE)/include

#---------------------------#
# Specify compilation flags #
#---------------------------#

.SUFFIXES: .o .c .u

CC	= gcc
RANLIB	= ranlib

# Define EXE as .exe for MS-DOS and derivatives.
PURE	=
EXE	=
#EXE	= .exe

MFLAG   = -DMNEMOSYNE
#MFLAG	=

# These three are typical settings for cc.
#ICFLAGS        =
#ICFLAGS	= -g
#ICFLAGS	= -g -Wall
#ICFLAGS        = -O

# These two are typical settings for optimized code with gcc.
#ICFLAGS		= -g -Wall
#ICFLAGS	= -g -O6
#ICFLAGS	= -g -O6 -Wall
      
# Use XCFLAGS to specify machine-dependent compilation flags.
# For some platforms no special flags are needed.
#XCFLAGS =
#XCFLAGS	= -DHAVE_IEEE_754 -DBSD
# Linux - Gcc 2.8.1 or higher on i686.
XCFLAGS	= -mcpu=pentiumpro -malign-double -DHAVE_IEEE_754 -DBSD
                           
# Define the level of self-checking and verbosity of the CUDD package.
DDDEBUG =
#DDDEBUG = -DDD_DEBUG -DDD_VERBOSE -DDD_STATS -DDD_CACHE_PROFILE -DDD_UNIQUE_PROFILE -DDD_COUNT

# Define the level of self-checking and verbosity of the MTR package.
#MTRDEBUG = -DMTR_DEBUG
MTRDEBUG =

# Loader options.
LDFLAGS	=

# Define PURE as purify to link with purify.
# Define PURE as quantify to link with quantify.
# Remember to compile with -g if you want line-by-line info with quantify.
PURE =

# This is to create the lint library
LINTFLAGS = -u -n
LINTSWITCH = -o

LIBS	= ./libdddmp.a $(WHERE)/cudd/libcudd.a $(WHERE)/mtr/libmtr.a \
	$(WHERE)/st/libst.a $(WHERE)/util/libutil.a $(WHERE)/epd/libepd.a

MNEMLIB =

BLIBS	= -kL. -kldddmp -kL$(WHERE)/cudd -klcudd -kL$(WHERE)/mtr -klmtr \
	-kL$(WHERE)/st -klst -kL$(WHERE)/util -klutil

LINTLIBS = ./llib-ldddmp.ln $(WHERE)/cudd/llib-lcudd.ln \
	$(WHERE)/mtr/llib-lmtr.ln $(WHERE)/st/llib-lst.ln \
	$(WHERE)/util/llib-lutil.ln

LDFLAGS =

#-----------------------#
# Files for the package #
#-----------------------#

P	= dddmp
PSRC    = dddmpStore.c dddmpLoad.c dddmpStoreCnf.c dddmpLoadCnf.c \
	  dddmpStoreMisc.c dddmpUtil.c dddmpBinary.c dddmpConvert.c \
	  dddmpDbg.c dddmpDdNodeBdd.c dddmpDdNodeCnf.c
PHDR    = dddmp.h dddmpInt.h $(INCLUDE)/cudd.h $(INCLUDE)/cuddInt.h
POBJ	= $(PSRC:.c=.o)
PUBJ	= $(PSRC:.c=.u)
TARGET	= test$(P)$(EXE)
TARGETu = test$(P)-u

# files for the test program
SRC	= test$(P).c
OBJ	= $(SRC:.c=.o)
UBJ	= $(SRC:.c=.u)

#------------------------------------------------------#
# Rules to compile and build libraries and executables #
#------------------------------------------------------#

lib$(P).a: $(POBJ)
	ar rv $@ $?
	$(RANLIB) $@

.c.o: $(PHDR)
	$(CC) -c  $< -I$(INCLUDE) -O2 -Wall -DSIZEOF_VOID_P=4 -DSIZEOF_INT=4
#	$(CC) -c $< -I$(INCLUDE) $(ICFLAGS) $(XCFLAGS) $(DDDEBUG) $(MTRDEBUG) $(LDFLAGS)

#	$(CC) -c $< -I$(INCLUDE) $(CFLAGS) $(DDDEBUG)

optimize_dec: lib$(P).b

lib$(P).b: $(PUBJ)
	ar rv $@ $?
	$(RANLIB) $@

.c.u: $(PHDR)
	cc -c $< -I$(INCLUDE) $(CFLAGS)

# if the header files change, recompile
$(POBJ): $(PHDR)
$(PUBJ): $(PHDR)
$(OBJ): $(PHDR)
$(UBJ): $(PHDR)

$(TARGET): $(SRC) $(OBJ) $(PHDR) $(LIBS) $(MNEMLIB)
	$(CC) -O2 -Wall -DSIZEOF_VOID_P=4 -DSIZEOF_INT=4 -o $@ $(OBJ) $(LIBS) $(MNEMLIB) -lm
#	$(PURE) $(CC) $(ICFLAGS) $(XCFLAGS) $(DDDEBUG) $(MTRDEBUG) $(LDFLAGS) -o $@ $(OBJ) $(LIBS) $(MNEMLIB) -lm

# optimize (DECstations and Alphas only: uses u-code)
$(TARGETu): $(SRC) $(UBJ) $(PHDR) $(LIBS:.a=.b)
	cc -O3 -Olimit 1000 $(XCFLAGS) $(LDFLAGS) -o $@ $(UBJ) $(BLIBS) -lm

lint: llib-l$(P).ln

llib-l$(P).ln: $(PSRC) $(PHDR)
	lint $(LINTFLAGS) $(LINTSWITCH)$(P) -I$(INCLUDE) $(PSRC)

lintpgm: lint
	lint $(LINTFLAGS) -I$(INCLUDE) $(SRC) $(LINTLIBS)

tags: $(PSRC) $(PHDR)
	ctags $(PSRC) $(PHDR)

all: lib$(P).a lib$(P).b llib-l$(P).ln tags

programs: $(TARGET) $(TARGETu) lintpgm

clean:
	rm -f *.o *.u mon.out gmon.out *.pixie *.Addrs *.Counts mnem.* \
	.pure core *.warnings

distclean: clean
	rm -f $(TARGET) $(TARGETu) lib*.a lib$(P).b llib-l$(P).ln \
	*.bak *~ tags .gdb_history *.qv *.qx




